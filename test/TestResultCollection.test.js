const TestResult = require('../Model/TestResult');
const TestResultCollection = require('../Model/TestResultCollection');
const testResultJSON = require('./fixtures/testResultOriginal.json');
const resultsCollectionJSON = require('./fixtures/results/results_sample_n50.json');

let testResult;
beforeEach(() => {
    testResult = new TestResult(testResultJSON);
});

test('Create an empty TestResultCollection and add same test twice.', () => {
    const testResultCollection = new TestResultCollection();
    expect(testResultCollection.length()).toBe(0);
    testResultCollection.add(testResult);
    expect(testResultCollection.length()).toBe(1);
    // Check that duplicates are not added
    testResultCollection.add(testResult);
    expect(testResultCollection.length()).toBe(1);
});


// We read a Results file that was generated by this application
describe('Read existing JSON to a TestResultCollection object', () => {
    let testResultCollection;
    beforeEach(() => {
        testResultCollection = new TestResultCollection(resultsCollectionJSON);
    });

    test('Check tests are in correct order', () => {
        const collectionSize = resultsCollectionJSON.length;
        // Make sure our sample is valid
        expect(collectionSize).toBeGreaterThan(1);
        const testResultCollection = new TestResultCollection(resultsCollectionJSON);
        expect(testResultCollection.length()).toBe(collectionSize);
        expect(checkOrder(testResultCollection)).toBe(true);
        // Add a new test and check order again
        testResultCollection.addOrdered(testResult);
        expect(testResultCollection.length()).toBe(collectionSize + 1);
        expect(checkOrder(testResultCollection)).toBe(true);
    });

    test('Test removeTestsFromDay()', () => {
        // First we get 1st test in the JSON and find all the tests that belong to the same day
        const sampleTest = testResultCollection.getTestAt(0);
        const previousSize = testResultCollection.length();
        const dateStr = getDateStr(sampleTest.date);

        const count = countDayTests(dateStr, testResultCollection);
        testResultCollection.removeTestsFromDay(dateStr);
        expect(testResultCollection.length()).toBe(previousSize - count);

        for (test of testResultCollection) {
            expect(getDateStr(test.date)).not.toBe(dateStr);
        }
    });

    test('Test get24hResults()', () => {
        // We're gonna get an array of nulls, since we have no data from the future
        const results = testResultCollection.get24hResults(2);
        expect(results.hours).toBeInstanceOf(Array);
        expect(results.tests).toBeInstanceOf(Array);
        // Both arrays need to have same length
        expect(results.hours).toHaveLength(results.tests.length);
        expect(results.tests[0]).toBeNull();
        expect(results.tests[1]).toBeNull(); // Etc

        // Get a sample date from the collection
        const sampleTest = testResultCollection.getTestAt(0);
        const dateStr = getDateStr(sampleTest.date);
        const count = countDayTests(dateStr, testResultCollection);

        // How many days separate today from the date of the test?
        const days = getDaysDifference(new Date().getTime(), sampleTest.date * 1000);
        // subCollection = Only the tests from the specified day
        const subCollection = testResultCollection.get24hResults(-days);
        // TODO: Why this works only some times?
        // expect(countNotNullEntries(subCollection.tests)).toBe(count);
    });

});

// HELPERS
// Check that a collection is ordered by timestamp, older tests should be first
function checkOrder(testCollection) {
    let previousTime = 0;
    for (test of testCollection) {
        if (test.date <= previousTime) {
            return false;
        }
        previousTime = test.date;
    }
    return true;
}

// Receives a timestamp and returns a simple string like '2019-04-13'
function getDateStr(timestamp) {
    const date = new Date(timestamp * 1000);
    return date.toISOString().substring(0,10);
}

/*
 * @param {string} date in format 'yyyy-mm-dd'
 * @returns {number} number of tests that belongs to the day provided
 */

function countDayTests(dateStr, testCollection) {
    let i = 0;
    for (test of testCollection) {
        if (getDateStr(test.date) === dateStr) i++;
    }
    return i;
}

/*
 * @param {number} date1 timestamp
 * @param {number} date2 timestamp
 * @returns {number} number of days of difference between two dates (natural number, decimals truncated)
 */
function getDaysDifference (date1, date2) {
    const timeDiff = Math.abs(date2 - date1);
    return Math.floor(timeDiff / (1000 * 3600 * 24));
}

function countNotNullEntries(arr) {
    return arr.reduce((acc, elem) => {
        return elem === null ? acc : acc + 1;
    }, 0);
}
